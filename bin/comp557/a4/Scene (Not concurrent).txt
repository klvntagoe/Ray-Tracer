package comp557.a4;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

/**
 * Simple scene loader based on XML file format.
 */
public class Scene {
    
    /** List of surfaces in the scene */
    public List<Intersectable> surfaceList = new ArrayList<Intersectable>();
	
	/** All scene lights */
	public Map<String,Light> lights = new HashMap<String,Light>();

    /** Contains information about how to render the scene */
    public Render render;
    
    /** The ambient light colour */
    public Color3f ambient = new Color3f();

    /** 
     * Default constructor.
     */
    public Scene() {
    	this.render = new Render();
    }
    
    /**
     * renders the scene
     */
    public void render(boolean showPanel) {
 
        Camera cam = render.camera; 
        int w = cam.imageSize.width;
        int h = cam.imageSize.height;
        
        render.init(w, h, showPanel);
        
        int samples = Math.max(render.samples, 1);
        boolean jitter = render.jitter;
        
        for ( int j = 0; j < h && !render.isDone(); j++ ) {
            for ( int i = 0; i < w && !render.isDone(); i++ ) {
            	//Initializations
            	double[] offset = {0.5,0.5};
            	Color3f lighting = new Color3f(0,0,0);
            	
            	//TODO: Objective 8: anti-aliasing (Stochastic Super-sampling)
            	if (!jitter) {	//If no jitter then shoot first ray to center else shoot ray with random offset
                	Color3f temp = getPixelColour(i, j, offset);
                    lighting.add(temp);
            	}else {
            		offset[0] = Math.random() - 0.5;
            		offset[1] = Math.random() - 0.5;
            		Color3f temp = getPixelColour(i, j, offset);
                    lighting.add(temp);
            	}
            	//Shoot remaining (sample - 1) rays with random offset
            	for (int k = 1; k < samples; k++) {
            		offset[0] = Math.random() - 0.5;
            		offset[1] = Math.random() - 0.5;
            		Color3f temp = getPixelColour(i, j, offset);
                    lighting.add(temp);
            	}
            	
            	lighting.x /= (float) samples;
    			lighting.y /= (float) samples;
    			lighting.z /= (float) samples;
    			
            	// Here is an example of how to calculate the pixel value.
            	Color3f c = new Color3f(lighting);
            	int r = (int)(255*c.x);
                int g = (int)(255*c.y);
                int b = (int)(255*c.z);
                int a = 255;
                int argb = (a<<24 | r<<16 | g<<8 | b);    
                
                // update the render image
                render.setPixel(i, j, argb);
            }
        }
        
        // save the final render image
        render.save();
        
        // wait for render viewer to close
        render.waitDone();
        
    }
    /**
     * Generate a ray through a pixel (i,j) and compute shading result with respect to the scene
     * 
     * @param i The pixel row.
     * @param j The pixel column.
     * @param offset The offset from the center of the pixel, in the range [-0.5,+0.5] for each coordinate. 
     */
    public Color3f getPixelColour(int i, int j, double[] offset) {

        // TODO: Objective 1: generate a ray (use the generateRay method)
    	Ray ray = new Ray();
    	generateRay(i, j, offset, render.camera, ray);
    	
        // TODO: Objective 2: test for intersection with scene surfaces
		IntersectResult closestResult = new IntersectResult();
    	for (Intersectable surface : this.surfaceList) {
    		IntersectResult result = new IntersectResult();
    		surface.intersect(ray, result);
    		if (closestResult.t > result.t) closestResult = new IntersectResult(result);
    	}
    	
        // TODO: Objective 3: compute the shaded result for the intersection point (perhaps requiring shadow rays)
        Color3f lighting = new Color3f(0,0,0);
        if (closestResult.material != null && 0 < closestResult.t && closestResult.t < Double.POSITIVE_INFINITY) {
        	lighting.set(closestResult.material.diffuse.x*ambient.x, closestResult.material.diffuse.y*ambient.y, closestResult.material.diffuse.z*ambient.z);

    		for (Light light : this.lights.values()) {
    			Vector3d shadowD = new Vector3d();
    			shadowD.sub(light.from, closestResult.p);
    			
    			Point3d shadowP = new Point3d();
    			shadowP.scaleAdd(closestResult.epsilon, shadowD, closestResult.p);
    			
    			Ray shadowRay = new Ray();
    			shadowRay.set(shadowP, shadowD);
    			
    			IntersectResult shadowResult = new IntersectResult();
    			
    			if (!inShadow(closestResult, light, shadowResult, shadowRay)) {
    				Vector3d v = new Vector3d();
    				v.sub(render.camera.from, closestResult.p);
        			v.normalize();
        			
                	Vector3d l = new Vector3d();
            		l.set(shadowD);
        			l.normalize();
        			
        			Color3f lambertian = new Color3f(closestResult.material.diffuse.x*light.color.x, closestResult.material.diffuse.y*light.color.y, closestResult.material.diffuse.z*light.color.z);
        			lambertian.scale((float) Math.max(0, closestResult.n.dot(l)));
        			lighting.add(lambertian);
        			
            		Vector3d bisector = new Vector3d();
        			bisector.add(v, l);
        			bisector.normalize();
        			
        			Color3f specular = new Color3f(closestResult.material.specular.x*light.color.x, closestResult.material.specular.y*light.color.y, closestResult.material.specular.z*light.color.z);
        			specular.scale((float) Math.pow(Math.max(0, closestResult.n.dot(bisector)), closestResult.material.shinyness));
        			lighting.add(specular);
    			}
    		}
        }else lighting.add(this.render.bgcolor);
        
        lighting.clamp(0, 1);
        
        return lighting;
    }
    
    /**
     * Generate a ray through pixel (i,j).
     * 
     * @param i The pixel row.
     * @param j The pixel column.
     * @param offset The offset from the center of the pixel, in the range [-0.5,+0.5] for each coordinate. 
     * @param cam The camera.
     * @param ray Contains the generated ray.
     */
	public static void generateRay(final int i, final int j, final double[] offset, final Camera cam, Ray ray) {
		// TODO: Objective 1: generate rays given the provided parmeters
		
		/*double distane = cam.from.distance(cam.to);
		double top = Math.tan(Math.toRadians(cam.fovy/2)) * distane;
		double bottom = -top;
		double aspectRatio = cam.imageSize.width / cam.imageSize.height;
		double right = top * aspectRatio;
		double left = -right;
		*/
		double top = cam.imageSize.height/2;
		double bottom = -top;
		double aspectRatio = cam.imageSize.width / cam.imageSize.height;
		double right = top*aspectRatio;
		double left = -right;
		double distance = top/Math.tan(Math.toRadians(cam.fovy/2));
		
		double uCoordinate = left + (right - left) * (i + offset[0])/cam.imageSize.width;
		double vCoordinate = bottom + (top - bottom) * (j + offset[1])/cam.imageSize.height;
		
		Vector3d u = new Vector3d(), v = new Vector3d(), w = new Vector3d();
		w.sub(cam.from, cam.to);
		w.normalize();
		u.cross(cam.up, w);
		u.normalize();
		v.cross(u, w);
		v.normalize();
		
		Point3d p = new Point3d();
		p.set(cam.from);
		
		Vector3d d = new Vector3d();
		d.scale(-distance, w);
		d.scaleAdd(vCoordinate, v, d);
		d.scaleAdd(uCoordinate, u, d);
		d.normalize();
		
		ray.set(p, d);
	}

	/**
	 * Shoot a shadow ray in the scene and get the result.
	 * 
	 * @param result Intersection result from raytracing. 
	 * @param light The light to check for visibility.
	 * @param root The scene node.
	 * @param shadowResult Contains the result of a shadow ray test.
	 * @param shadowRay Contains the shadow ray used to test for visibility.
	 * 
	 * @return True if a point is in shadow, false otherwise. 
	 */
	public boolean inShadow(final IntersectResult result, final Light light, IntersectResult shadowResult, Ray shadowRay) {
		
		// TODO: Objective 5: check for shadows and use it in your lighting computation
		for (Intersectable surface : surfaceList) {
            surface.intersect(shadowRay, shadowResult);
            if(shadowResult.epsilon < shadowResult.t && shadowResult.t < Double.POSITIVE_INFINITY) {
            	Vector3d lightVector = new Vector3d();
            	lightVector.sub(light.from, shadowRay.eyePoint);
            	
            	Vector3d shadowVector = new Vector3d();
            	shadowVector.sub(shadowResult.p, shadowRay.eyePoint);
            	
            	if (shadowResult.material != null && shadowVector.length() < lightVector.length()) return true;
            }
        }
		return false;
	}
}
